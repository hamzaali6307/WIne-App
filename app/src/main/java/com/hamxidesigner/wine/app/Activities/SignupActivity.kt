package com.hamxidesigner.wine.app.Activitiesimport android.annotation.SuppressLintimport android.app.DatePickerDialogimport android.content.Intentimport android.os.Bundleimport android.util.Logimport android.util.Patternsimport android.view.Viewimport android.view.animation.AnimationUtilsimport android.widget.*import androidx.appcompat.app.AppCompatActivityimport com.google.android.material.snackbar.Snackbarimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.FirebaseUserimport com.google.firebase.auth.PhoneAuthProvider.ForceResendingTokenimport com.google.firebase.auth.PhoneAuthProvider.OnVerificationStateChangedCallbacksimport com.google.firebase.firestore.DocumentReferenceimport com.google.firebase.firestore.FirebaseFirestoreimport com.hamxidesigner.wine.app.Helper.SessionManagerimport com.hamxidesigner.wine.app.Rimport com.hbb20.CountryCodePickerimport com.kaopiz.kprogresshud.KProgressHUDimport java.text.SimpleDateFormatimport java.util.*import java.util.Calendar.*class SignupActivity : AppCompatActivity(R.layout.activity_login) {    private lateinit var img_login: ImageView    lateinit var callbacks: OnVerificationStateChangedCallbacks    var mVerificationId: String = ""    lateinit var sessionManager: SessionManager    lateinit var ccp: CountryCodePicker    private lateinit var dateSetListener: DatePickerDialog.OnDateSetListener    lateinit var ccp_country: CountryCodePicker    var country_code = ""    lateinit var radio_male: RadioButton    lateinit var radio_female: RadioButton    lateinit var gender: String    var country_name = ""    private lateinit var c: Calendar    lateinit var txt_paswrd: EditText    lateinit var txt_dob: TextView    lateinit var currentFirebaseUser: FirebaseUser    lateinit var login_page: TextView    lateinit var txt_contct: EditText    lateinit var txt_fname: EditText    lateinit var txt_lname: EditText    lateinit var number: String    lateinit var linear: LinearLayout    private var kProgressHUD: KProgressHUD? = null    private lateinit var txt_email: TextView    private lateinit var mResendToken: ForceResendingToken    lateinit var snackbar: Snackbar    lateinit var mAuth: FirebaseAuth    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_signup)        initViews()        initObjec()        clickViews()    }    @SuppressLint("SetTextI18n")    private fun clickViews() {        login_page.setOnClickListener(View.OnClickListener {            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            startActivity(Intent(this, LoginActivity::class.java))            login_page.startAnimation(aniFade)            finish()        })        txt_dob.setOnClickListener {            DatePickerDialog(this, dateSetListener,                    c.get(Calendar.YEAR),                    c.get(Calendar.MONTH),                    c.get(Calendar.DAY_OF_MONTH)).show()          //  txt_dob.text = Calendar.YEAR.toString() + "/" + Calendar.MONTH + "/" + Calendar.DAY_OF_MONTH        }        ccp.setOnCountryChangeListener {            country_code = ccp.selectedCountryCode        }        ccp_country.setOnCountryChangeListener {            country_name = ccp.selectedCountryName        }        img_login.setOnClickListener {            if (radio_female.isChecked) {                gender = "female"            }            if (radio_male.isChecked) {                gender = "male"            }            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            img_login.startAnimation(aniFade)            if (validatee(txt_lname.text.toString(),txt_fname.text.toString(),txt_email.text.toString(), txt_paswrd.text.toString(), txt_contct.text.toString())) {                kProgressHUD!!.show()                mAuth.createUserWithEmailAndPassword(txt_email.text.toString(), txt_paswrd.text.toString())                        .addOnCompleteListener(this) { task ->                            if (task.isSuccessful) {                                Log.d("signup", "createUserWithEmail:success")                                val user_id = mAuth.currentUser?.uid                                val firestore = FirebaseFirestore.getInstance()                                val newContact: MutableMap<String, Any> = HashMap()                                newContact["email"] = txt_email.text.toString()                                newContact["contact_noc"] = country_code + txt_contct.getText().toString()                                newContact["contact_no"] = txt_contct.text.toString()                                newContact["contry_code"] = country_code                                newContact["country"] = country_name                                newContact["dob"] = txt_dob.getText().toString()                              //  newContact["password"] = txt_paswrd.text.toString()                                newContact["user_id"] = user_id.toString()                                newContact["gender"] = gender                                newContact["f_name"] = txt_fname.text.toString()                                newContact["l_name"] = txt_lname.text.toString()                                firestore.collection("users").add(newContact).addOnSuccessListener { runnable: DocumentReference? ->                                    snackbar = Snackbar                                            .make(linear, "User created successfully with " + txt_email.text.toString(), Snackbar.LENGTH_LONG)                                    val browserIntent = Intent(this, LoginActivity::class.java)                                    startActivity(browserIntent)                                    overridePendingTransition(R.anim.slide_in, R.anim.slide_out)                                    finish()                                }.addOnFailureListener { runnable: Exception? -> Toast.makeText(this, "Some thing went wrong", Toast.LENGTH_SHORT).show() }                            } else {                                // If sign in fails, display a message to the user.                                Log.w("TAG", "createUserWithEmail:failure", task.exception)                                Toast.makeText(baseContext, "Authentication failed.",                                        Toast.LENGTH_SHORT).show()                                var snackbar = Snackbar                                        .make(linear,"Authentication failed."  , Snackbar.LENGTH_LONG)                                snackbar.show()                                kProgressHUD!!.dismiss()                            }                        }            } else {                snackbar = Snackbar                        .make(linear, "Some values are missing...", Snackbar.LENGTH_LONG)                snackbar.show()            }        }    }    private fun validatee(Lname :String,fname :String,email: String, passworrd: String, cotact: String): Boolean {        val validFname = !fname.isEmpty()        if (!validFname) {            txt_fname.error = "Please Enter first name"        }        val validLname = !Lname.isEmpty()        if (!validLname) {            txt_lname.error = "Please Enter last name"        }        val validEmail = !email.isEmpty() && Patterns.EMAIL_ADDRESS.toRegex().matches(email)        if (!validEmail) {            txt_email.error = "Please Enter Valid Email"        }        val validCotact = !cotact.isEmpty()        if (!validCotact) {            txt_contct.error = "Please Enter Valid Conact No"        }        val validPaswrd = !passworrd.isEmpty() && passworrd.length > 4  && passworrd.length <16        if (!validPaswrd) {            txt_paswrd.error = "Please Enter Valid Password"        }        return validFname && validFname && validEmail && validPaswrd && validCotact    }    //    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {//        mAuth.signInWithCredential(credential)//                .addOnCompleteListener(this) { task: Task<AuthResult?> ->//                    if (task.isSuccessful) {//                        kProgressHUD?.dismiss()//                        val user = task.result!!.user//                        if (mVerificationId.equals("")) {//                            sessionManager.setId("true")//                            var intent = Intent(this, MainActivity::class.java)//                            startActivity(intent)//                            finish()//                        }//                        else {//                            if (!verificationcode.isEmpty()) {//                                var intent = Intent(this, MainActivity::class.java)//                                startActivity(intent)//                                sessionManager.setId("true")//                                finish()//                            } else {//                                var intent = Intent(this, VerificationActivity::class.java)//                                intent.putExtra("authId", mVerificationId)//                                intent.putExtra("varCode", verificationcode)//                                intent.putExtra("phoneNo", user?.phoneNumber)//                                startActivity(intent)//                                overridePendingTransition(R.anim.slide_in, R.anim.slide_out)//                            }//                        }//                    } else {//                        kProgressHUD?.dismiss()//                        Log.w("login", "signInWithCredential:failure", task.exception)//                        snackbar = Snackbar//                                .make(linear, "Some thing went wrong", Snackbar.LENGTH_LONG)//                        snackbar.show()//                        if (task.exception is FirebaseAuthInvalidCredentialsException) {//                        }//                    }//                }//    }    @SuppressLint("SimpleDateFormat")    private fun initObjec() {        gender = "male"        ccp.setAutoDetectedCountry(true)        ccp_country.setAutoDetectedCountry(true)        country_code = ccp.selectedCountryCode        country_name = ccp_country.selectedCountryName        initProgressDialog()        txt_dob.text = SimpleDateFormat("dd/MM/yyyy").format(System.currentTimeMillis())        sessionManager = SessionManager(applicationContext)        mResendToken = ForceResendingToken.zza()        ccp.setAutoDetectedCountry(true)        mAuth = FirebaseAuth.getInstance()        c = Calendar.getInstance();        dateSetListener = DatePickerDialog.OnDateSetListener { view, year, monthOfYear, dayOfMonth ->            c.set(Calendar.YEAR, year)            c.set(Calendar.MONTH, monthOfYear)            c.set(Calendar.DAY_OF_MONTH, dayOfMonth)            val myFormat = "dd/MM/yyyy" // mention the format you need            val sdf = SimpleDateFormat(myFormat, Locale.US)            txt_dob.text = dayOfMonth.toString() + "/" + monthOfYear + "/" + year        }    }    fun initProgressDialog() {        kProgressHUD = KProgressHUD.create(this)                .setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)                .setLabel("Please wait")                .setDetailsLabel("Verification is processing")                .setCancellable(false)                .setAnimationSpeed(4)                .setBackgroundColor(resources.getColor(R.color.colorPrimaryDark))                .setDimAmount(0.5f)    }    private fun initViews() {        img_login = findViewById(R.id.img_login)        txt_fname = findViewById(R.id.txt_fname)        txt_lname = findViewById(R.id.txt_lname)        radio_male = findViewById(R.id.radio_male)        radio_female = findViewById(R.id.radio_female)        txt_email = findViewById(R.id.txt_email)        txt_contct = findViewById(R.id.txt_contct)        txt_dob = findViewById(R.id.txt_dob)        ccp_country = findViewById(R.id.ccp_country)        ccp = findViewById(R.id.ccp)        txt_paswrd = findViewById(R.id.txt_paswrd)        linear = findViewById(R.id.linear)        login_page = findViewById(R.id.login_page)    }    override fun onBackPressed() {        super.onBackPressed()        val browserIntent = Intent(this, LoginActivity::class.java)        startActivity(browserIntent)        overridePendingTransition(R.anim.slide_in, R.anim.slide_out)        finish()    }}