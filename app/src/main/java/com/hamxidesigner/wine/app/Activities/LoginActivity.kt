package com.hamxidesigner.wine.app.Activitiesimport android.content.Intentimport android.os.Bundleimport android.util.Logimport android.util.Patternsimport android.view.animation.AnimationUtilsimport android.widget.*import androidx.appcompat.app.AppCompatActivityimport com.google.android.material.snackbar.Snackbarimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.PhoneAuthProvider.ForceResendingTokenimport com.google.firebase.auth.PhoneAuthProvider.OnVerificationStateChangedCallbacksimport com.hamxidesigner.wine.app.Helper.SessionManagerimport com.hamxidesigner.wine.app.Rimport com.hbb20.CountryCodePickerimport com.kaopiz.kprogresshud.KProgressHUDimport java.util.regex.Patternclass LoginActivity : AppCompatActivity(R.layout.activity_login) {    private lateinit var img_login: ImageView    lateinit var callbacks: OnVerificationStateChangedCallbacks    var mVerificationId: String=""    lateinit var sessionManager: SessionManager    lateinit var  txt_paswrd:EditText    lateinit var linear: LinearLayout    private var kProgressHUD: KProgressHUD? = null    private lateinit var txt_contct: TextView    private lateinit var signup_page: Button    private lateinit var mResendToken: ForceResendingToken    lateinit var verificationcode: String    lateinit var snackbar: Snackbar    lateinit var mAuth: FirebaseAuth    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_login)        initViews()        initObjec()        clickViews()//        callbacks = object : OnVerificationStateChangedCallbacks() {//            override fun onVerificationCompleted(credential: PhoneAuthCredential) {//                verificationcode = credential.smsCode.toString()//                snackbar = Snackbar//                        .make(linear, "contact no already verified", Snackbar.LENGTH_LONG)//                snackbar.show()//                signInWithPhoneAuthCredential(credential)//            }//            override fun onVerificationFailed(e: FirebaseException) {//                kProgressHUD?.dismiss()//                snackbar = Snackbar//                        .make(linear, "Invalid error.", Snackbar.LENGTH_LONG)//                snackbar.show()//            }//            override fun onCodeSent(verificationId: String,//                                    token: ForceResendingToken) {//                kProgressHUD?.dismiss()//                mVerificationId = verificationId//                mResendToken = token//                snackbar = Snackbar//                        .make(linear, "code sent", Snackbar.LENGTH_LONG)//                snackbar.show()//            }//        }    }    private fun clickViews() {        signup_page.setOnClickListener {            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            signup_page.startAnimation(aniFade)            startActivity(Intent(this,SignupActivity::class.java))            overridePendingTransition(R.anim.slide_in, R.anim.slide_out)            finish()        }        img_login.setOnClickListener {            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            img_login.startAnimation(aniFade)            if (validatee(txt_contct.text.toString(), txt_paswrd.text.toString())) {                kProgressHUD!!.show()                mAuth.signInWithEmailAndPassword(txt_contct.text.toString(), txt_paswrd.text.toString())                        .addOnCompleteListener(this) { task ->                            if (task.isSuccessful) {                                // Sign in success, update UI with the signed-in user's information                                Log.d("", "createUserWithEmail:success")                                kProgressHUD!!.dismiss()                                sessionManager.setId("true")                                var intent = Intent(this, MainActivity::class.java)                                overridePendingTransition(R.anim.slide_in, R.anim.slide_out)                                startActivity(intent)                                snackbar = Snackbar                                        .make(linear, "User found with " + txt_contct.text.toString(), Snackbar.LENGTH_LONG)                                snackbar.show()                                val user = mAuth.currentUser                                finish()                            } else {                                // If sign in fails, display a message to the user.                                Log.w("TAG", "createUserWithEmail:failure", task.exception)                                snackbar = Snackbar                                        .make(linear, "Authentication failed." + txt_contct.text.toString(), Snackbar.LENGTH_LONG)                                snackbar.show()                                kProgressHUD!!.dismiss()                            }                        }                // firebase contact no verification//                    number = "+" + country_code + txt_contct.text.toString().trim({ it <= ' ' })//                    kProgressHUD!!.show()//                    PhoneAuthProvider.getInstance().verifyPhoneNumber(//                            number,  // Phone number to verify//                            120,  // Timeout duration//                            TimeUnit.SECONDS,  // Unit of timeout//                            this,  // Activity (for callback binding)//                            callbacks, mResendToken) // OnVerificationStateChangedCallbacks            }else{                snackbar = Snackbar                        .make(linear, "Some values are missing...", Snackbar.LENGTH_LONG)                snackbar.show()            }         }        }    private fun  validatee(email: String, passworrd: String): Boolean {        val validEmail = !email.isEmpty() && Patterns.EMAIL_ADDRESS.toRegex().matches(email)        if (!validEmail ) {            txt_contct.setError("Please Enter Valid Email")        }        val validPaswrd = !passworrd.isEmpty() && passworrd.length > 4  && passworrd.length <16        if (!validPaswrd ) {            txt_paswrd.setError("Please Enter Valid Password")        }        return validEmail && validPaswrd    }//    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {//        mAuth.signInWithCredential(credential)//                .addOnCompleteListener(this) { task: Task<AuthResult?> ->//                    if (task.isSuccessful) {//                        kProgressHUD?.dismiss()//                        val user = task.result!!.user//                        if (mVerificationId.equals("")) {//                            sessionManager.setId("true")//                            var intent = Intent(this, MainActivity::class.java)//                            startActivity(intent)//                            finish()//                        }//                        else {//                            if (!verificationcode.isEmpty()) {//                                var intent = Intent(this, MainActivity::class.java)//                                startActivity(intent)//                                sessionManager.setId("true")//                                finish()//                            } else {//                                var intent = Intent(this, VerificationActivity::class.java)//                                intent.putExtra("authId", mVerificationId)//                                intent.putExtra("varCode", verificationcode)//                                intent.putExtra("phoneNo", user?.phoneNumber)//                                startActivity(intent)//                                overridePendingTransition(R.anim.slide_in, R.anim.slide_out)//                            }//                        }//                    } else {//                        kProgressHUD?.dismiss()//                        Log.w("login", "signInWithCredential:failure", task.exception)//                        snackbar = Snackbar//                                .make(linear, "Some thing went wrong", Snackbar.LENGTH_LONG)//                        snackbar.show()//                        if (task.exception is FirebaseAuthInvalidCredentialsException) {//                        }//                    }//                }//    }    private fun initObjec() {        initProgressDialog()        sessionManager = SessionManager(applicationContext)        mResendToken = ForceResendingToken.zza()        mAuth = FirebaseAuth.getInstance()    }    fun initProgressDialog() {        kProgressHUD = KProgressHUD.create(this)                .setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)                .setLabel("Please wait")                .setDetailsLabel("Verification is processing")                .setCancellable(false)                .setAnimationSpeed(4)                .setBackgroundColor(resources.getColor(R.color.colorPrimaryDark))                .setDimAmount(0.5f)    }    private fun initViews() {        img_login = findViewById(R.id.img_login)        txt_contct = findViewById(R.id.txt_contct)        txt_paswrd = findViewById(R.id.txt_paswrd)        linear = findViewById(R.id.linear)        signup_page = findViewById(R.id.signup_page)    }}