package com.hamxidesigner.wine.app.Activitiesimport android.content.ContentValuesimport android.content.Intentimport android.os.Bundleimport android.util.Logimport android.view.Viewimport android.widget.ImageViewimport android.widget.RelativeLayoutimport android.widget.TextViewimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport androidx.recyclerview.widget.DefaultItemAnimatorimport androidx.recyclerview.widget.RecyclerViewimport androidx.recyclerview.widget.StaggeredGridLayoutManagerimport com.google.android.material.snackbar.Snackbarimport com.google.firebase.firestore.CollectionReferenceimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.Queryimport com.hamxidesigner.wine.app.Adapter.DataAdapterimport com.hamxidesigner.wine.app.Helper.RecyclerViewTouchListenerimport com.hamxidesigner.wine.app.Model.DataModelimport com.hamxidesigner.wine.app.Rimport com.jakewharton.rxbinding2.widget.RxTextViewimport com.jakewharton.rxbinding2.widget.TextViewTextChangeEventimport com.kaopiz.kprogresshud.KProgressHUDimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.disposables.CompositeDisposableimport io.reactivex.observers.DisposableObserverimport io.reactivex.schedulers.Schedulersimport com.google.firebase.firestore.CollectionReference as CollectionReference1import java.util.*import java.util.concurrent.TimeUnitimport kotlin.collections.ArrayList@Suppress("NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS", "CAST_NEVER_SUCCEEDS")class SearchingActivity : AppCompatActivity() {    private lateinit var dataAdapter: DataAdapter    private lateinit var recyclerView: RecyclerView    private val disposable = CompositeDisposable()    private lateinit var kProgressHUD: KProgressHUD    private lateinit var docRefCollecMain: Query    private  var docRefCollecMain1: CollectionReference1 = FirebaseFirestore.getInstance().collection("wines")    lateinit var txt_searching: TextView    lateinit var img_filter: ImageView    lateinit var eror: TextView    var checkFriendWineQuery: Query? = null    lateinit var data: String    lateinit var dataModel: DataModel    lateinit var relitive :RelativeLayout    lateinit var db: FirebaseFirestore    var ratings: Float = 0.0F    var rating: Float = 0.0F    lateinit var wine_id: String    private lateinit var arrayList: ArrayList<DataModel>    private lateinit var filter: ArrayList<DataModel>    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.searching_activity)        initViews()        initObjec()        clickViews()        disposable.add(RxTextView.textChangeEvents(txt_searching)                .skipInitialValue()                .debounce(300, TimeUnit.MILLISECONDS) /*.filter(new Predicate<TextViewTextChangeEvent>() {                                    @Override                                    public boolean test(TextViewTextChangeEvent textViewTextChangeEvent) throws Exception {                                        return TextUtils.isEmpty(textViewTextChangeEvent.text().toString()) || textViewTextChangeEvent.text().toString().length() > 2;                                    }                                })*/                .distinctUntilChanged()                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(searchingData()))    }    private fun initViews() {        recyclerView = findViewById(R.id.recycler_view)        txt_searching = findViewById(R.id.txt_searching)        relitive = findViewById(R.id.relitive)        eror = findViewById(R.id.eror)        img_filter = findViewById(R.id.img_filter)        arrayList = ArrayList<DataModel>()        filter = ArrayList<DataModel>()        initProgressDialog()    }    private fun clickViews() {        recyclerView.addOnItemTouchListener(RecyclerViewTouchListener(applicationContext, recyclerView, object : RecyclerViewTouchListener.ClickListener {            override fun onClick(view: View?, position: Int) {                val movie: DataModel = arrayList.get(position)                var intent = Intent(applicationContext, DetailsActivity::class.java)                dataModel = arrayList.get(position)                intent.putExtra("data", dataModel)                startActivity(intent)            }            override fun onLongClick(view: View?, position: Int) {}        }))    }    private fun initObjec() {        db = FirebaseFirestore.getInstance()        data = intent.getStringExtra("data")        kProgressHUD.show()        dataAdapter = DataAdapter(arrayList, applicationContext, arrayList)        val mLayoutManager: RecyclerView.LayoutManager = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)        recyclerView.layoutManager = mLayoutManager        recyclerView.itemAnimator = DefaultItemAnimator()        recyclerView.adapter = dataAdapter        if (data.isEmpty()) {            prepareDataa()        } else {            getWineIdOffriendsLike(data)        }    }    private fun getWineIdOffriendsLike(friendId: String) {        checkFriendWineQuery = FirebaseFirestore.getInstance().collection("favourites").whereEqualTo("person_id", friendId)        checkFriendWineQuery!!.get().addOnCompleteListener { task ->            if (task.isSuccessful) {                var size = task.result!!.documents.size                for (document in 0 until size) {                    wine_id = task.result!!.documents[document].get("wine_id") as String                    Log.d("friends_wine_id", "" + wine_id)                    // prepareData(wine_id)                    docRefCollecMain = FirebaseFirestore.getInstance().collection("wines").whereEqualTo("wine_id", wine_id)                    docRefCollecMain.get().addOnSuccessListener { documentSnapshot ->                        if (!documentSnapshot.isEmpty) {                            var test = documentSnapshot.documents                            Log.d("wineess", test.size.toString())                            for (documntName in test.indices) {                                var country_origin = test[documntName].get("country_origin") as String                                var ean = test[documntName].get("ean") as String                                var pdo_id = test[documntName].get("pdo_id") as String                                var pic = test[documntName].get("pic") as String                                var price_id = test[documntName].get("price_id") as String                                var wine_id = test[documntName].get("wine_id") as String                                var wine_name = test[documntName].get("wine_name") as String                                var wine_type = test[documntName].get("wine_type") as String                                var year = test[documntName].get("year") as String                                dataModel = DataModel(                                        test.toString(),                                        country_origin,                                        ean,                                        pdo_id,                                        pic,                                        price_id,                                        wine_id,                                        wine_name,                                        wine_type,                                        year,                                        "",                                        "",                                        "")                                arrayList.add(dataModel)                                kProgressHUD.dismiss()                                dataAdapter.notifyDataSetChanged()                            }                        } else {                            kProgressHUD.dismiss()                            var snackbar = Snackbar                                    .make(relitive,"No data found"  , Snackbar.LENGTH_LONG)                            snackbar.show()                        }                    }                    kProgressHUD.dismiss()                    dataAdapter.notifyDataSetChanged()                }            } else {                kProgressHUD.dismiss()                var snackbar = Snackbar                        .make(relitive,"your friends dn't have any fav wine yet"  , Snackbar.LENGTH_LONG)                snackbar.show()                Log.d("dataaError", "Error getting documents: ", task.exception)            }        }.addOnFailureListener { runnable: Exception? ->            kProgressHUD.dismiss()            var snackbar = Snackbar                    .make(relitive,"some thing went wrong"  , Snackbar.LENGTH_LONG)            snackbar.show()        }    }    private fun prepareData(wineId:String) {        docRefCollecMain = FirebaseFirestore.getInstance().collection("wines").whereEqualTo("wine_id", wineId)        docRefCollecMain.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                Log.d("wineess", test.size.toString())                for (documntName in test.indices) {                    var country_origin = test[documntName].get("country_origin") as String                    var ean = test[documntName].get("ean") as String                    var pdo_id = test[documntName].get("pdo_id") as String                    var pic = test[documntName].get("pic") as String                    var price_id = test[documntName].get("price_id") as String                    var wine_id = test[documntName].get("wine_id") as String                    var wine_name = test[documntName].get("wine_name") as String                    var wine_type = test[documntName].get("wine_type") as String                    var year = test[documntName].get("year") as String                    dataModel = DataModel(                            test.toString(),                            country_origin,                            ean,                            pdo_id,                            pic,                            price_id,                            wine_id,                            wine_name,                            wine_type,                            year,                            "",                            "",                            "")                    arrayList.add(dataModel)                    kProgressHUD.dismiss()                    dataAdapter.notifyDataSetChanged()                }            } else {                kProgressHUD.dismiss()                Toast.makeText(applicationContext, "No data found", Toast.LENGTH_LONG).show()            }        }    }    private fun prepareDataa() {        docRefCollecMain1.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                Log.d("wineess", test.size.toString())                for (documntName in test.indices) {                    var country_origin = test[documntName].get("country_origin") as String                    var ean = test[documntName].get("ean") as String                    var pdo_id = test[documntName].get("pdo_id") as String                    var pic = test[documntName].get("pic") as String                    var price_id = test[documntName].get("price_id") as String                    var wine_id = test[documntName].get("wine_id") as String                    var wine_name = test[documntName].get("wine_name") as String                    var wine_type = test[documntName].get("wine_type") as String                    var year = test[documntName].get("year") as String                    dataModel = DataModel(                            test.toString(),                            country_origin,                            ean,                            pdo_id,                            pic,                            price_id,                            wine_id,                            wine_name,                            wine_type,                            year,                            "",                            "",                            "")                    arrayList.add(dataModel)                    kProgressHUD.dismiss()                    dataAdapter.notifyDataSetChanged()                }            } else {                kProgressHUD.dismiss()                var snackbar = Snackbar                        .make(relitive,"No data found"  , Snackbar.LENGTH_LONG)                snackbar.show()            }        }    }    private fun searchingData(): DisposableObserver<TextViewTextChangeEvent?> {        return object : DisposableObserver<TextViewTextChangeEvent?>() {            override fun onNext(textViewTextChangeEvent: TextViewTextChangeEvent) {                dataAdapter.getFilter().filter(textViewTextChangeEvent.text())            }            override fun onError(e: Throwable) {                eror.visibility = View.VISIBLE            }            override fun onComplete() {            }        }    }    override fun onBackPressed() {        overridePendingTransition(R.anim.slide_in, R.anim.slide_out)        finish()    }    fun initProgressDialog() {        kProgressHUD = KProgressHUD.create(this)                .setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)                .setLabel("Please wait")                .setDetailsLabel("Fetching data")                .setCancellable(false)                .setAnimationSpeed(4)                .setBackgroundColor(resources.getColor(R.color.colorPrimaryDark))                .setDimAmount(0.5f)    }}