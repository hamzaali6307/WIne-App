package com.hamxidesigner.wine.app.Adapterimport android.content.Contextimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.view.animation.AnimationUtilsimport android.widget.*import androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.hamxidesigner.wine.app.Model.DataModelimport com.hamxidesigner.wine.app.Rimport com.jakewharton.rxbinding2.widget.RxRatingBarclass ReviewsAdapter(var listFiltered: ArrayList<DataModel>, val context: Context, val arrayList: ArrayList<DataModel>) : RecyclerView.Adapter<ReviewsAdapter.MyViewHolder>(), Filterable {    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {        listFiltered = arrayList        val itemView = LayoutInflater.from(parent?.context)                .inflate(R.layout.review_layout, parent, false)        return MyViewHolder(itemView)    }    override fun getItemCount(): Int {        return listFiltered.size    }    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {        var dataModel = listFiltered[position]      //  holder.txt_name.setText(dataModel.wine_name)        if(dataModel.rating != null){            holder.txt_rating.setText("("+dataModel.rating+")")            holder.ratings.setRating( dataModel.rating.toFloat())          //  Glide.with(context).load(dataModel.pic).dontTransform().into(holder.image)        }else{            Log.d("rating empty","empty rating")        }    }    class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {        var txt_name: TextView        var txt_rating: TextView        var ratings: RatingBar        var image: ImageView        init {            image = itemView.findViewById(R.id.image)            txt_name = itemView.findViewById(R.id.txt_name)            txt_rating = itemView.findViewById(R.id.txt_rating)            ratings = itemView.findViewById(R.id.ratings)        }    }    override fun getFilter(): Filter {        return object : Filter() {            override fun performFiltering(charSequence: CharSequence): FilterResults {                val charString = charSequence.toString()                if (charString.isEmpty()) {                    listFiltered = arrayList                } else {                    val filteredList: MutableList<DataModel> = java.util.ArrayList<DataModel>()                    for (row in arrayList) { // name match condition. this might differ depending on your requirement                        if (row.wine_name.toLowerCase().contains(charString.toLowerCase())) {                            filteredList.add(row)                        }                    }                    listFiltered = filteredList as ArrayList<DataModel>                }                val filterResults = FilterResults()                filterResults.values = listFiltered                return filterResults            }            override fun publishResults(p0: CharSequence, p1: FilterResults) {                listFiltered = p1.values as ArrayList<DataModel>                notifyDataSetChanged()            }        }    }}