package com.hamxidesigner.wine.app.Activitiesimport android.Manifestimport android.annotation.SuppressLintimport android.content.DialogInterfaceimport android.content.Intentimport android.graphics.Colorimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.provider.Settingsimport android.view.Gravityimport android.view.Menuimport android.view.MenuItemimport android.view.animation.AnimationUtilsimport android.widget.ImageViewimport android.widget.Toastimport androidx.annotation.RequiresApiimport androidx.appcompat.app.ActionBarDrawerToggleimport androidx.appcompat.app.AlertDialogimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.widget.Toolbarimport androidx.core.content.res.ResourcesCompatimport androidx.core.view.GravityCompatimport androidx.drawerlayout.widget.DrawerLayoutimport androidx.fragment.app.Fragmentimport androidx.fragment.app.FragmentTransactionimport com.google.android.material.navigation.NavigationViewimport com.google.firebase.auth.FirebaseAuthimport com.hamxidesigner.wine.app.Fragment.FragmentFeedimport com.hamxidesigner.wine.app.Fragment.FragmentMainDashBoardimport com.hamxidesigner.wine.app.Helper.SessionManagerimport com.hamxidesigner.wine.app.Rimport com.karumi.dexter.Dexterimport com.karumi.dexter.MultiplePermissionsReportimport com.karumi.dexter.PermissionTokenimport com.karumi.dexter.listener.DexterErrorimport com.karumi.dexter.listener.PermissionRequestimport com.karumi.dexter.listener.multi.MultiplePermissionsListenerclass MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {    lateinit var drawer: DrawerLayout    lateinit var transaction: FragmentTransaction    lateinit var navigationView: NavigationView    lateinit var toolbar: Toolbar    lateinit var sessionManager: SessionManager    lateinit var toggle: ActionBarDrawerToggle    lateinit var fragment: Fragment    lateinit var drawer_img:ImageView    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        permissionss()        if (savedInstanceState == null) {            val detailsFragment = FragmentMainDashBoard().newInstance()            supportFragmentManager                    .beginTransaction()                    .replace(R.id.content_frame, detailsFragment, null)                    //.addToBackStack(null)                    .commit()        }        initViews()        initObject()        clickViews()    }    @SuppressLint("WrongConstant")    private fun clickViews() {        drawer_img.setOnClickListener{            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            drawer_img.startAnimation(aniFade)            if(!drawer.isDrawerOpen(Gravity.START))                drawer.openDrawer(Gravity.START)            else drawer.closeDrawer(Gravity.END)        }    }    private fun permissionss() {        Dexter.withActivity(this)                .withPermissions(                        Manifest.permission.CAMERA,                        Manifest.permission.INTERNET,                        Manifest.permission.ACCESS_WIFI_STATE,                        Manifest.permission.READ_CONTACTS,                        Manifest.permission.READ_EXTERNAL_STORAGE,                        Manifest.permission.WRITE_EXTERNAL_STORAGE)                .withListener(object : MultiplePermissionsListener {                    override fun onPermissionsChecked(report: MultiplePermissionsReport) { // check if all permissions are granted                        if (report.areAllPermissionsGranted()) {                           // Toast.makeText(applicationContext, "All permissions are granted!", Toast.LENGTH_SHORT).show()                        }                        // check for permanent denial of any permission                        if (report.isAnyPermissionPermanentlyDenied) { // show alert dialog navigating to Settings                            showSettingsDialog()                        }                    }                    override fun onPermissionRationaleShouldBeShown(permissions: List<PermissionRequest>, token: PermissionToken) {                        token.continuePermissionRequest()                    }                }).withErrorListener { error: DexterError? -> Toast.makeText(applicationContext, "Error occurred! ", Toast.LENGTH_SHORT).show() }                .onSameThread()                .check()    }    private fun showSettingsDialog() {        val builder = AlertDialog.Builder(this)        builder.setTitle("Need Permissions")        builder.setMessage("This app needs permission to use this feature. You can grant them in app settings.")        builder.setPositiveButton("GOTO SETTINGS") { dialog: DialogInterface, which: Int ->            dialog.cancel()            openSettings()        }        builder.setNegativeButton("Cancel") { dialog: DialogInterface, which: Int -> dialog.cancel() }        builder.show()    }    private fun openSettings() {        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)        val uri = Uri.fromParts("package", packageName, null)        intent.data = uri        startActivityForResult(intent, 101)    }    private fun initObject() {        sessionManager = SessionManager(applicationContext)        toolbar.setTitle("The Wine App")        setSupportActionBar(toolbar)        toggle = ActionBarDrawerToggle(                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)        val drawable = ResourcesCompat.getDrawable(resources, R.drawable.ic_sort, applicationContext.theme)        toggle.setHomeAsUpIndicator(drawable)        toggle.syncState()        toggle.isDrawerIndicatorEnabled = true    }    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)    private fun initViews() {        drawer = findViewById(R.id.drawer_layout)        toolbar = findViewById(R.id.toolbar)        drawer_img = findViewById(R.id.drawer_img)        navigationView = findViewById(R.id.nav_view)        toolbar.setTitleTextColor(Color.WHITE)        navigationView.setNavigationItemSelectedListener(this)    }    override fun onNavigationItemSelected(menuItem: MenuItem): Boolean {        when (menuItem.itemId) {            R.id.logout -> {                Toast.makeText(applicationContext,"logout",Toast.LENGTH_LONG).show()                sessionManager.setId("false")                FirebaseAuth.getInstance().signOut()                startActivity(Intent(this, LoginActivity::class.java))                overridePendingTransition(R.anim.slide_in, R.anim.slide_out)                finish()            }            R.id.share -> {                val intent = Intent()                intent.action = Intent.ACTION_SEND                intent.type = "text/plain"                intent.putExtra(Intent.EXTRA_TEXT, "The Wine App")                intent.putExtra(Intent.EXTRA_TEXT, "https://play.google.com/store/apps/details?id=com.hamxidesigner.wine.app")                startActivity(Intent.createChooser(intent, "Share"))                overridePendingTransition(R.anim.slide_in, R.anim.slide_out)            }            R.id.rateus -> {                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=com.hamxidesigner.wine.app"))                startActivity(browserIntent)                overridePendingTransition(R.anim.slide_in, R.anim.slide_out)            }            R.id.privcy -> {                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=com.hamxidesigner.wine.app"))                startActivity(browserIntent)                overridePendingTransition(R.anim.slide_in, R.anim.slide_out)            }            R.id.about -> {                startActivity(Intent(this, AboutActivity::class.java))                overridePendingTransition(R.anim.slide_in, R.anim.slide_out)            }            R.id.home -> {                val detailsFragment = FragmentMainDashBoard().newInstance()                supportFragmentManager                        .beginTransaction()                        .replace(R.id.content_frame, detailsFragment, null)                        .addToBackStack(null)                        .commit()            }        }        drawer.closeDrawer(GravityCompat.START)        return true    }    override fun onBackPressed() {        if (drawer.isDrawerOpen(GravityCompat.START))            drawer.closeDrawer(GravityCompat.START)        else {            super.onBackPressed()        }    }}