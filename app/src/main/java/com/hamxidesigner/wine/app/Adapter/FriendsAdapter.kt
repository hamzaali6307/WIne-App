package com.hamxidesigner.wine.app.Adapterimport android.content.Contextimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.view.animation.AnimationUtilsimport android.widget.*import androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.google.firebase.firestore.FirebaseFirestoreimport com.hamxidesigner.wine.app.Model.DataModelimport com.hamxidesigner.wine.app.Rimport com.jakewharton.rxbinding2.widget.RxRatingBarclass FriendsAdapter(var listFiltered: ArrayList<DataModel>, val context: Context, val arrayList: ArrayList<DataModel>) : RecyclerView.Adapter<FriendsAdapter.MyViewHolder>(), Filterable {    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {        listFiltered = arrayList        val itemView = LayoutInflater.from(parent?.context)                .inflate(R.layout.friends_layout, parent, false)        return MyViewHolder(itemView)    }    override fun getItemCount(): Int {        return listFiltered.size    }    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {        var dataModel = listFiltered[position]        var siz = listFiltered.size        holder.txt_fav.text =  dataModel.totelWine + " Wines Saved"        var checkFriendWineQuery = FirebaseFirestore.getInstance().collection("users").whereEqualTo("user_id", dataModel.friendId)        checkFriendWineQuery!!.get().addOnCompleteListener { task ->            if (task.isSuccessful) {                //for (document in  task.result!!) {                    val f_name:String = task.result!!.documents[0].get("f_name") as String                    val l_name:String = task.result!!.documents[0].get("l_name") as String                    holder.txt_name.text = f_name +" "+l_name              //  }                notifyDataSetChanged()            }        }    }    private fun getFriendsDetail(friendId: String?,holder:MyViewHolder) {    }    class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {        var txt_name: TextView        var txt_fav: TextView        init {            txt_name = itemView.findViewById(R.id.txt_name)            txt_fav = itemView.findViewById(R.id.txt_fav)        }    }    override fun getFilter(): Filter {        return object : Filter() {            override fun performFiltering(charSequence: CharSequence): FilterResults {                val charString = charSequence.toString()                if (charString.isEmpty()) {                    listFiltered = arrayList                } else {                    val filteredList: MutableList<DataModel> = java.util.ArrayList<DataModel>()                    for (row in arrayList) { // name match condition. this might differ depending on your requirement                        if (row.wine_name.toLowerCase().contains(charString.toLowerCase())) {                            filteredList.add(row)                        }                    }                    listFiltered = filteredList as ArrayList<DataModel>                }                val filterResults = FilterResults()                filterResults.values = listFiltered                return filterResults            }            override fun publishResults(p0: CharSequence, p1: FilterResults) {                listFiltered = p1.values as ArrayList<DataModel>                notifyDataSetChanged()            }        }    }}