package com.hamxidesigner.wine.app.Fragmentimport android.annotation.SuppressLintimport android.content.ContentValues.TAGimport android.content.Intentimport android.os.Bundleimport android.util.Logimport android.view.*import android.view.View.inflateimport android.view.animation.AnimationUtilsimport android.widget.ImageViewimport android.widget.RelativeLayoutimport android.widget.TextViewimport android.widget.Toastimport androidx.core.content.ContextCompatimport androidx.fragment.app.Fragmentimport androidx.recyclerview.widget.DefaultItemAnimatorimport androidx.recyclerview.widget.RecyclerViewimport androidx.recyclerview.widget.StaggeredGridLayoutManagerimport com.google.android.material.snackbar.Snackbarimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.FirebaseUserimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.Queryimport com.hamxidesigner.wine.app.Activities.DetailsActivityimport com.hamxidesigner.wine.app.Activities.MainActivityimport com.hamxidesigner.wine.app.Activities.SearchingActivityimport com.hamxidesigner.wine.app.Adapter.DataAdapterimport com.hamxidesigner.wine.app.Helper.RecyclerViewTouchListenerimport com.hamxidesigner.wine.app.Helper.RecyclerViewTouchListener.ClickListenerimport com.hamxidesigner.wine.app.Model.DataModelimport com.hamxidesigner.wine.app.Rimport com.kaopiz.kprogresshud.KProgressHUDimport java.util.*import com.google.firebase.firestore.CollectionReference as CollectionReference1class FragmentFav : Fragment() {    private lateinit var dataAdapter: DataAdapter    private lateinit var recyclerView: RecyclerView    private lateinit var arrayList: ArrayList<DataModel>    private lateinit var filter: ArrayList<DataModel>    private lateinit var mView: View    lateinit var eror:TextView    var ratings: Float = 0.0F    lateinit var relitive:RelativeLayout    var rating: Float = 0.0F    private lateinit var dataModel: DataModel    lateinit var txt_feed:ImageView    lateinit var kProgressHUD: KProgressHUD    lateinit var  currentFirebaseUser: FirebaseUser    lateinit var db: FirebaseFirestore    var docRefCollecMain: CollectionReference1 = FirebaseFirestore.getInstance().collection("wines")    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {        mView = inflater.inflate(R.layout.fragment_main, container, false)        recyclerView = mView.findViewById(R.id.recyclerview)        arrayList = ArrayList<DataModel>()        filter = ArrayList<DataModel>()        initViews()        initObect()        clickView()        return mView    }    private fun initViews() {        eror = mView.findViewById(R.id.eror)        relitive = mView.findViewById(R.id.relitive)        initProgressDialog()    }    private fun clickView() {        recyclerView.addOnItemTouchListener(RecyclerViewTouchListener(context, recyclerView, object : ClickListener {            override fun onClick(view: View?, position: Int) {                val movie: DataModel = arrayList.get(position)                var intent = Intent(context, DetailsActivity::class.java)                dataModel = arrayList.get(position)                intent.putExtra("data",dataModel)                startActivity(intent)            }            override fun onLongClick(view: View?, position: Int) {}        }))    }    @SuppressLint("RestrictedApi")    private fun initObect() {        db = FirebaseFirestore.getInstance()        currentFirebaseUser = FirebaseAuth.getInstance().currentUser!!        hasOptionsMenu()        kProgressHUD.show()        dataAdapter = context?.let { DataAdapter(arrayList, it, arrayList) }!!        val mLayoutManager: RecyclerView.LayoutManager = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)        recyclerView.setLayoutManager(mLayoutManager)        recyclerView.setItemAnimator(DefaultItemAnimator())        recyclerView.setAdapter(dataAdapter)        prepareData()    }    private fun prepareData() {        var docRefCollecMains: Query = FirebaseFirestore.getInstance().collection("favourites").whereEqualTo("person_id", currentFirebaseUser.uid)        docRefCollecMains.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                for (documntName in documentSnapshot.documents) {                    var wine_id = documntName.get("wine_id") as String                      getFavWine(wine_id)                }            } else {                kProgressHUD.dismiss()                eror.visibility = View.VISIBLE                var snackbar = Snackbar                        .make(relitive,"No Wine found"  , Snackbar.LENGTH_LONG)                snackbar.show()            }        }    }    private fun getFavWine(wineId: String) {        var docRefCollec: Query = FirebaseFirestore.getInstance().collection("wines").whereEqualTo("wine_id",wineId)        docRefCollec.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                Log.d("wineess", test.size.toString())                for (documntName in test.indices) {                    var country_origin = test[documntName].get("country_origin") as String                    var ean = test[documntName].get("ean") as String                    var pdo_id = test[documntName].get("pdo_id") as String                    var pic = test[documntName].get("pic") as String                    var price_id = test[documntName].get("price_id") as String                    var wine_id = test[documntName].get("wine_id") as String                    var wine_name = test[documntName].get("wine_name") as String                    var wine_type = test[documntName].get("wine_type") as String                    var year = test[documntName].get("year") as String                    dataModel = DataModel(                            test.toString(),                            country_origin,                            ean,                            pdo_id,                            pic,                            price_id,                            wine_id,                            wine_name,                            wine_type,                            year,                            "",                            "",                            "")                    arrayList.add(dataModel)                    kProgressHUD.dismiss()                    dataAdapter.notifyDataSetChanged()                }            } else {                kProgressHUD.dismiss()                var snackbar = Snackbar                        .make(relitive,"No Wine found"  , Snackbar.LENGTH_LONG)                snackbar.show()            }        }    }    private  fun getRating(wineId: String):Float  {        var docRefCollecMain: Query = FirebaseFirestore.getInstance().collection("reviews").whereEqualTo("wine_id", dataModel.wine_id)        docRefCollecMain.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                test.size                for (documntName in documentSnapshot.documents) {                    var rating = documntName.get("rating") as String                    ratings += rating.toFloat()                    rating= (ratings/test.size).toString()                    Log.d("rating", documntName.get("rating") as String)                    dataModel = DataModel(rating)                    arrayList.add(dataModel)                }                // arrayList.add(dataModel)                dataAdapter.notifyDataSetChanged()                kProgressHUD?.dismiss()            } else {                Log.d("rating","rating not found")            }        }        return rating    }    fun newInstance(): FragmentFav {        return FragmentFav()    }    fun initProgressDialog() {        kProgressHUD = KProgressHUD.create(activity)                .setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)                .setLabel("Please wait")                .setDetailsLabel("Fetching data")                .setCancellable(false)                .setAnimationSpeed(4)                .setBackgroundColor(resources.getColor(R.color.colorPrimaryDark))                .setDimAmount(0.5f)    }    override fun onDestroy() {        super.onDestroy()        kProgressHUD.dismiss()    }//    override fun onCreateOptionsMenu(menu: Menu): Boolean {//        .inflate(R.menu.search)//        return true//    }}