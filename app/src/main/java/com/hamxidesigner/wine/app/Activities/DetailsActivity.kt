@file:Suppress("DEPRECATION")package com.hamxidesigner.wine.app.Activitiesimport android.Manifestimport android.annotation.SuppressLintimport android.app.ProgressDialogimport android.content.ContentValuesimport android.content.ContentValues.TAGimport android.content.Contextimport android.content.Intentimport android.content.Intent.FLAG_GRANT_READ_URI_PERMISSIONimport android.content.pm.PackageManagerimport android.graphics.Bitmapimport android.media.MediaScannerConnectionimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.os.Environmentimport android.os.Environment.getExternalStorageDirectoryimport android.os.StrictModeimport android.provider.MediaStoreimport android.util.Logimport android.view.Viewimport android.view.animation.AnimationUtilsimport android.widget.*import androidx.annotation.RequiresApiimport androidx.appcompat.app.AppCompatActivityimport androidx.cardview.widget.CardViewimport androidx.core.content.FileProviderimport androidx.core.content.FileProvider.getUriForFileimport androidx.core.net.toUriimport androidx.recyclerview.widget.DefaultItemAnimatorimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.google.android.material.snackbar.Snackbarimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.FirebaseUserimport com.google.firebase.firestore.DocumentReferenceimport com.google.firebase.firestore.DocumentSnapshotimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.Queryimport com.google.firebase.storage.StorageReferenceimport com.hamxidesigner.wine.app.Adapter.ReviewsAdapterimport com.hamxidesigner.wine.app.Model.DataModelimport com.hamxidesigner.wine.app.Rimport com.jgabrielfreitas.core.BlurImageViewimport com.kaopiz.kprogresshud.KProgressHUDimport kotlinx.android.synthetic.main.review_layout.*import java.io.Fileimport java.io.FileOutputStreamimport java.io.IOExceptionimport java.io.OutputStreamimport java.text.SimpleDateFormatimport java.util.*import kotlin.collections.HashMapimport kotlin.math.roundToIntclass DetailsActivity : AppCompatActivity() {    lateinit var shareInts: ImageView    lateinit var img_wine: ImageView    private lateinit var dataAdapter: ReviewsAdapter    private lateinit var recyclerView: RecyclerView    private lateinit var arrayList: ArrayList<DataModel>    lateinit var txt_name: TextView    lateinit var txt_type: TextView    lateinit var error: TextView    lateinit var txt_year: TextView    lateinit var kProgressHUD: KProgressHUD    lateinit var btn_submit: Button    lateinit var txt_country: TextView    lateinit var giv_rating: RatingBar    lateinit var txt_pdo: TextView    lateinit var txt_nam: TextView    lateinit var txt_yr: TextView    lateinit var txt_pd: TextView    lateinit var txt_price: TextView    lateinit var txt_rat: TextView    lateinit var dataModel: DataModel    lateinit var rater: RatingBar    lateinit var rat: RatingBar    lateinit var imgfav: ImageView    lateinit var bck_img: ImageView    lateinit var img_win: ImageView    lateinit var btn_wish: ImageView    lateinit var winee_id: String    lateinit var linear_share: LinearLayout    lateinit var dogBlurImageView: BlurImageView    var ratttttt: Float = 0.0F    var rating: Float = 0.0F    var rate: Float = 0.0F    var pdo_id = ""    lateinit var relitive:RelativeLayout    lateinit var cardview: CardView    var country_origion = ""    lateinit var progressDialog: ProgressDialog    var img = ""    private lateinit var imageRef: StorageReference    lateinit var currentFirebaseUser: FirebaseUser    lateinit var firestore: FirebaseFirestore    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.details_layout)        initErrorUri()        initViews()        initObject()        clickViews()    }    private fun initErrorUri() {        // android 7.0 system to solve the problem of taking pictures        var builder = StrictMode.VmPolicy.Builder()        StrictMode.setVmPolicy(builder.build())        builder.detectFileUriExposure()    }    private fun initObject() {        winee_id = dataModel.wine_id        pdo_id = dataModel.pdo_id        img = dataModel.pic        country_origion = dataModel.country_origin        getRating()        checkFavWine()        getCountry(dataModel.wine_id)        getPdo(dataModel.pdo_id)        getPrice(dataModel.price_id)        Glide.with(applicationContext).load(dataModel.pic).dontTransform().into(img_wine)        Glide.with(applicationContext).load(img).dontTransform().into(img_win)        txt_name.setText(dataModel.wine_name)        txt_nam.setText(dataModel.wine_name)        txt_type.setText(dataModel.id_type_en)        txt_pd.setText(dataModel.id_type_es + "/" + dataModel.id_type_en)        txt_yr.setText(dataModel.year)        txt_year.setText(dataModel.year)        kProgressHUD.show()        dataAdapter = ReviewsAdapter(arrayList, this, arrayList)        val mLayoutManager: RecyclerView.LayoutManager = GridLayoutManager(this, 1)        recyclerView.setLayoutManager(mLayoutManager)        recyclerView.setItemAnimator(DefaultItemAnimator())        recyclerView.setAdapter(dataAdapter)    }    private fun getPrice(priceId: String?) {        var docRefCollecMain: Query = FirebaseFirestore.getInstance().collection("price_tag").whereEqualTo("price_id", priceId)        docRefCollecMain.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                for (documntName in documentSnapshot.documents) {                    var price_en = documntName.get("price_en") as String                    var price_es = documntName.get("price_es") as String                    txt_price.setText(price_en)                    kProgressHUD.dismiss()                }            } else {             var snackbar = Snackbar                        .make(relitive, "Some data may be missing" , Snackbar.LENGTH_LONG)                snackbar.show()            }        }    }    private fun getPdo(pdoId: String?) {        var docRefCollecMain: Query = FirebaseFirestore.getInstance().collection("pdo").whereEqualTo("pdo_id", pdoId)        docRefCollecMain.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                for (documntName in documentSnapshot.documents) {                    var pdo_name = documntName.get("pdo_name") as String                    txt_pdo.setText(pdo_name)                }            } else {                var snackbar = Snackbar                        .make(relitive, "Some data may be missing"  , Snackbar.LENGTH_LONG)                snackbar.show()            }        }    }    private fun getCountry(countryId: String?) {        var docRefCollecMain: Query = FirebaseFirestore.getInstance().collection("country_origin").whereEqualTo("country_id", countryId)        docRefCollecMain.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                for (documntName in documentSnapshot.documents) {                    var country_en = documntName.get("country_en") as String                    var country_es = documntName.get("country_es") as String                    txt_country.setText(country_en)                }            } else {                var snackbar = Snackbar                        .make(relitive, "Some data may be missing"  , Snackbar.LENGTH_LONG)                snackbar.show()            }        }    }    private fun getRating() {        rate =0.0F        var docRefCollecMain: Query = FirebaseFirestore.getInstance().collection("reviews").whereEqualTo("wine_id", winee_id)        docRefCollecMain.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty) {                var test = documentSnapshot.documents                for (documntName in documentSnapshot.documents.indices) {                    rating = (documentSnapshot.documents[documntName].get("rating") as String).toFloat()                    rate += rating                    dataModel = DataModel(rating.toString())                    arrayList.add(dataModel)                }                ratttttt = rate.div(test.size)                rater.rating = ratttttt                rat.rating = ratttttt                var valRat: Int = ratttttt.roundToInt()                txt_rat.text = "(" + test.size + ")"                kProgressHUD.dismiss()            }        }    }    private fun clickViews() {        shareInts.setOnClickListener {            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            shareInts.startAnimation(aniFade)            if (img != null) {                Glide.with(applicationContext).load(img).dontTransform().into(img_win)                downloadToLocalFile()            } else {                var snackbar = Snackbar                        .make(relitive,"Image not found for wine to share"  , Snackbar.LENGTH_LONG)                snackbar.show()            }            //  shareFileToInsta(uri)        }        bck_img.setOnClickListener {            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            bck_img.startAnimation(aniFade)            overridePendingTransition(R.anim.slide_in, R.anim.slide_out)            finish()        }        btn_wish.setOnClickListener {            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            btn_wish.startAnimation(aniFade)            val usersRef = firestore.collection("wishlist")            var query = usersRef.whereEqualTo("wine_id", winee_id)            query = query.whereEqualTo("person_id", currentFirebaseUser.uid)            query.get().addOnCompleteListener { task ->                if (task.isSuccessful) {                    for (documentSnapshot in task.result!!) {                        val winee_id = documentSnapshot.getString("winee_id")                        if (winee_id == winee_id) {                            var snackbar = Snackbar                                    .make(relitive,"Wine already saved in wishlist"  , Snackbar.LENGTH_LONG)                            snackbar.show()                        }                    }                }                if (task.result!!.size() == 0) {                    Log.d(TAG, "User not Exists")                    var date = Date()                    var data = HashMap<String, String>()                    data.put("date", date.toString())                    data.put("wine_id", winee_id)                    data.put("person_id", currentFirebaseUser.uid)                    firestore.collection("wishlist").add(data).addOnSuccessListener { documentReference ->                        var snackbar = Snackbar                                .make(relitive,"wine added in wishlist Successfully"  , Snackbar.LENGTH_LONG)                        snackbar.show()                    }.addOnFailureListener() {                        var snackbar = Snackbar                                .make(relitive,"Some things went wrong"  , Snackbar.LENGTH_LONG)                        snackbar.show()                    }                }            }        }        imgfav.setOnClickListener {            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            imgfav.startAnimation(aniFade)            val usersRef = firestore.collection("favourites")            var query = usersRef.whereEqualTo("wine_id", winee_id)            query = query.whereEqualTo("person_id", currentFirebaseUser.uid)            query.get().addOnCompleteListener { task ->                if (task.isSuccessful) {                    for (documentSnapshot in task.result!!) {                        val win_id = documentSnapshot.getString("wine_id")                        if (winee_id == win_id) {                            Log.d(TAG, "Wine already saved in favourite")                            var snackbar = Snackbar                                    .make(relitive,"Wine already saved in favourite"  , Snackbar.LENGTH_LONG)                            snackbar.show()                            imgfav.setImageResource(R.drawable.circle_fav)                        }                    }                }                if (task.result!!.size() == 0) {                    Log.d(TAG, "User not Exists")                    var date = Date()                    var data = HashMap<String, String>()                    data.put("date", date.toString())                    data.put("wine_id", winee_id)                    data.put("person_id", currentFirebaseUser.uid)                    firestore.collection("favourites").add(data).addOnSuccessListener { documentReference ->                        var snackbar = Snackbar                                .make(relitive,"favourite saved Successfully"  , Snackbar.LENGTH_LONG)                        snackbar.show()                        imgfav.setImageResource(R.drawable.circle_fav)                    }.addOnFailureListener() {                        imgfav.setImageResource(R.drawable.circle_unfav)                        var snackbar = Snackbar                                .make(relitive,"Some things went wrong"  , Snackbar.LENGTH_LONG)                        snackbar.show()                    }                }            }        }        btn_submit.setOnClickListener {            val aniFade = AnimationUtils.loadAnimation(applicationContext, R.anim.model_in)            btn_submit.startAnimation(aniFade)            var ratData = giv_rating.rating            if (ratData != 0.0.toFloat()) {                var data = HashMap<String, String>()                data.put("rating", ratData.toString())                data.put("wine_id", winee_id)                firestore.collection("reviews").add(data).addOnSuccessListener { documentReference ->                    getRating()                    var snackbar = Snackbar                            .make(relitive,"Rating saved Successfully"  , Snackbar.LENGTH_LONG)                    snackbar.show()                }.addOnFailureListener() {                    var snackbar = Snackbar                            .make(relitive,"Some things went wrong"  , Snackbar.LENGTH_LONG)                    snackbar.show()                }            } else {                var snackbar = Snackbar                        .make(relitive,"Rating of wine not be empty"  , Snackbar.LENGTH_LONG)                snackbar.show()            }        }    }    private fun checkFavWine() {        val usersRef = firestore.collection("favourites")        var query = usersRef.whereEqualTo("wine_id", winee_id)        query = query.whereEqualTo("person_id", currentFirebaseUser.uid)        query.get().addOnCompleteListener { task ->            if (!task.result!!.documents.isEmpty()) {                    imgfav.setImageResource(R.drawable.circle_fav)            } else {                imgfav.setImageResource(R.drawable.circle_unfav)            }        }    }    private fun viewToBitmap(view: View): Bitmap {        view.isDrawingCacheEnabled = true        view.measure(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT)        view.layout(0, 0, view.width, view.height)        view.buildDrawingCache(true)        var b = Bitmap.createBitmap(view.drawingCache)        view.isDrawingCacheEnabled = false        Glide.with(applicationContext).load(img).dontTransform().into(img_win)        return b    }    private fun downloadToLocalFile() {        cardview.visibility = View.GONE        var bitmap = viewToBitmap(linear_share)        Glide.with(applicationContext).load(img).dontTransform().into(img_win)        if (android.os.Build.VERSION.SDK_INT >= 28) {            var fos: OutputStream            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {                var resolver = contentResolver                var contentValues = ContentValues()                contentValues.put(MediaStore.MediaColumns.DISPLAY_NAME, "name" + ".jpg")                contentValues.put(MediaStore.MediaColumns.MIME_TYPE, "image/jpg")                contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_PICTURES)                var imageUri: Uri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)!!                fos = resolver.openOutputStream(Objects.requireNonNull(imageUri)!!)!!                shareFileToInsta(imageUri)                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos)                Objects.requireNonNull(fos).close()            } else {                var folder = getExternalStorageDirectory().toString() + File.separator + "WineApp/"                val directory = File(folder)                if (!directory.exists()) {                    directory.mkdirs()                }                val file = File(folder + UUID.randomUUID().toString() + ".jpg")                var fos = FileOutputStream(file)                bitmap.compress(Bitmap.CompressFormat.PNG, 90, fos)                val screenshotUri = FileProvider.getUriForFile(applicationContext, "com.hamxidesigner.wine.app.fileprovider", file)                shareFileToInsta(screenshotUri)            }        } else {            var folder = getExternalStorageDirectory().toString() + File.separator + "WineApp/"            val directory = File(folder)            if (!directory.exists()) {                directory.mkdirs()            }            val file = File(folder + UUID.randomUUID().toString() + ".jpg")            var fos = FileOutputStream(file)            bitmap.compress(Bitmap.CompressFormat.PNG, 90, fos)            val screenshotUri = FileProvider.getUriForFile(applicationContext, "com.hamxidesigner.wine.app.fileprovider", file)            shareFileToInsta(screenshotUri)        }    }    private fun shareFileToInsta(uri: Uri) {        try {            val feedIntent = Intent(Intent.ACTION_SEND)            feedIntent.type = "image/*"            feedIntent.putExtra(Intent.EXTRA_STREAM, uri)            feedIntent.setPackage("com.instagram.android")            val storiesIntent = Intent("com.instagram.share.ADD_TO_STORY")            storiesIntent.setDataAndType(uri, "image/*")            intent.putExtra("content_url", "www.wineapp.com")            storiesIntent.putExtra("bottom_background_color", "#FF00FF")            storiesIntent.setPackage("com.instagram.share.ADD_TO_STORY")            grantUriPermission("com.instagram.share.ADD_TO_STORY", uri, FLAG_GRANT_READ_URI_PERMISSION)            val chooserIntent = Intent.createChooser(feedIntent, "Share Wine On Instagram")            chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, arrayOf(storiesIntent))            startActivity(chooserIntent)            saveShareOnInsta()        } catch (e: IOException) {            e.printStackTrace()        }    }    private fun saveShareOnInsta() {        var date = Date()        var data = HashMap<String, String>()        data.put("date", date.toString())        data.put("person_id", currentFirebaseUser.uid)        data.put("wine_id", winee_id)        data.put("pdo_id", pdo_id)        data.put("country_id", country_origion)        firestore.collection("instagram_shares").add(data).addOnSuccessListener { documentReference ->            Log.d("done", "share on instagram")        }.addOnFailureListener() {            Log.d("Error", "Some thing went wrong")        }    }    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)    private fun initViews() {        progressDialog = ProgressDialog(this)        currentFirebaseUser = FirebaseAuth.getInstance().currentUser!!        initProgressDialog()        firestore = FirebaseFirestore.getInstance()        arrayList = ArrayList()        shareInts = findViewById(R.id.shareInts)        cardview = findViewById(R.id.carview)        linear_share = findViewById(R.id.linear_share)        dogBlurImageView = findViewById(R.id.dogBlurImageView)        img_win = findViewById(R.id.img_win)        txt_nam = findViewById(R.id.txt_nam)        txt_yr = findViewById(R.id.txt_yr)        txt_pd = findViewById(R.id.txt_pd)        img_wine = findViewById(R.id.img_wine)        txt_type = findViewById(R.id.txt_type)        txt_name = findViewById(R.id.txt_name)        txt_year = findViewById(R.id.txt_year)        rater = findViewById(R.id.rating)        rat = findViewById(R.id.rat)        btn_wish = findViewById(R.id.btn_wish)        txt_rat = findViewById(R.id.txt_rat)        giv_rating = findViewById(R.id.giv_rating)        recyclerView = findViewById(R.id.recyclerview)        txt_pdo = findViewById(R.id.txt_pdo)        txt_price = findViewById(R.id.txt_price)        btn_submit = findViewById(R.id.btn_submit)        error = findViewById(R.id.error)        txt_country = findViewById(R.id.txt_country)        imgfav = findViewById(R.id.imgfav)        bck_img = findViewById(R.id.bck_img)        relitive = findViewById(R.id.relitive)        dataModel = getIntent().getSerializableExtra("data") as DataModel    }    fun initProgressDialog() {        kProgressHUD = KProgressHUD.create(this)                .setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)                .setLabel("Please wait")                .setDetailsLabel("Fetching data")                .setCancellable(false)                .setAnimationSpeed(4)                .setBackgroundColor(resources.getColor(R.color.colorPrimaryDark))                .setDimAmount(0.5f)    }    override fun onDestroy() {        super.onDestroy()        kProgressHUD.dismiss()    }}