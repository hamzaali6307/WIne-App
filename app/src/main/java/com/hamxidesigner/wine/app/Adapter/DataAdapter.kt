package com.hamxidesigner.wine.app.Adapterimport android.content.Contextimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.view.animation.AnimationUtilsimport android.widget.*import androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.google.firebase.firestore.CollectionReferenceimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.Queryimport com.hamxidesigner.wine.app.Model.DataModelimport com.hamxidesigner.wine.app.Rimport com.jakewharton.rxbinding2.widget.RxRatingBarimport kotlinx.android.synthetic.main.design_layout.view.*import java.math.BigDecimalclass DataAdapter(var listFiltered: ArrayList<DataModel>, val context: Context, val arrayList: ArrayList<DataModel>) : RecyclerView.Adapter<DataAdapter.MyViewHolder>(), Filterable {    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {        listFiltered = arrayList        val itemView = LayoutInflater.from(parent.context)                .inflate(R.layout.design_layout, parent, false)        return MyViewHolder(itemView)    }    override fun getItemCount(): Int {        return listFiltered.size    }    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {        var ratttttt: Float = 0.0F        var rating: Float = 0.0F        var rate: Float = 0.0F        val dataModel = listFiltered[position]        holder.txt_name.text = dataModel.wine_name        holder.txt_type.text = dataModel.id_type_es        Glide.with(context).load(dataModel.pic).dontTransform().into(holder.img_wine)        var docRefColWinTyp: CollectionReference = FirebaseFirestore.getInstance().collection("wine_type")        docRefColWinTyp.whereEqualTo("id_wine_type", dataModel.wine_id).get()                .addOnSuccessListener { documents ->                    if (!documents.isEmpty) {                        Log.d("size", documents.documents.size.toString())                        var value = documents.documents[0].get("id_type_en") as String                        var value1 = documents.documents[0].get("id_type_es") as String                        holder.txt_type.text = value                        dataModel.id_type_en = value                        dataModel.id_type_es = value1                    }                }.addOnFailureListener {                    Log.d("not found", "dsdfer")                }        var docRefCollecMain: Query = FirebaseFirestore.getInstance().collection("reviews").whereEqualTo("wine_id", dataModel.wine_id)        Log.d("wine_id", dataModel.wine_id)        docRefCollecMain.get().addOnSuccessListener { documentSnapshot ->            if (!documentSnapshot.isEmpty && documentSnapshot != null) {                var test = documentSnapshot.documents                for (documntName in documentSnapshot.documents.indices) {                    rating = (documentSnapshot.documents[documntName].get("rating") as String).toFloat()                    rate += rating                }                ratttttt = rate.div(test.size)                holder.txt_rat_count.text = "(" + test.size.toString() + ")"                holder.ratingbar.rating = ratttttt                dataModel.rating = ratttttt.toString()                rating = 0.0F                ratttttt = 0.0F            } else {                Log.d("rating", "rating not found")            }        }//        else{//            holder.img_wine.setBackgroundResource(R.mipmap.noimage)//        }    }    class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {        var txt_name: TextView        var txt_type: TextView        var txt_rat_count: TextView        var ratingbar: RatingBar        var img_wine: ImageView        var linear: LinearLayout        init {            img_wine = itemView.findViewById(R.id.img_wine)            txt_name = itemView.findViewById(R.id.txt_name)            txt_type = itemView.findViewById(R.id.txt_type)            ratingbar = itemView.findViewById(R.id.ratingbar)            txt_rat_count = itemView.findViewById(R.id.txt_rat_count)            linear = itemView.findViewById(R.id.linear)        }    }    override fun getFilter(): Filter {        return object : Filter() {            override fun performFiltering(charSequence: CharSequence): FilterResults {                val charString = charSequence.toString()                if (charString.isEmpty()) {                    listFiltered = arrayList                } else {                    val filteredList: MutableList<DataModel> = java.util.ArrayList<DataModel>()                    for (row in arrayList) { // name match condition. this might differ depending on your requirement                        if (row.wine_name.toLowerCase().contains(charString.toLowerCase())) {                            filteredList.add(row)                        }                    }                    listFiltered = filteredList as ArrayList<DataModel>                }                val filterResults = FilterResults()                filterResults.values = listFiltered                return filterResults            }            override fun publishResults(p0: CharSequence, p1: FilterResults) {                listFiltered = p1.values as ArrayList<DataModel>                notifyDataSetChanged()            }        }    }}